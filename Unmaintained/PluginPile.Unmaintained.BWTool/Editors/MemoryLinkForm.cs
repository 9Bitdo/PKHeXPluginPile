using PKHeX.Core;

namespace PluginPile.Unmaintained.BWTool; 

public partial class MemoryLinkForm : Form {
  private readonly SAV5B2W2 SAV;
  private MemoryLink ml;
  private readonly Random rand;
  public MemoryLinkForm(SAV5B2W2 sav) {
    InitializeComponent();
    SAV = sav;
    rand = new Random(Guid.NewGuid().GetHashCode());

    ml = new MemoryLink(SAV.GetData(MemoryLink.Offset, MemoryLink.Size));

    if (ml.Block2.Name == "") {
      MessageBox.Show("The savegame does not contain memory link Data.\n\nA default memory link data will be loaded, it unlocks the following:" +
                      "\n\t- All 8 flashbacks" +
                      "\n\t- NPC Battles with Cheren and Bianca" +
                      "\n\t- NPC will use BW1 trainer Name instead of just Trainer" +
                      "\n\t- Certificates for completed Pokedex and trophies from Battle Subway\n\t   (they are placed in the players room)" +
                      "\n\t- My personal hall of fame from my BW1 playthrough\n\t    (no known use in-game)" +
                      "\n\nNote: No data related to Loblolly's Studio (would unlock Dream World furniture from BW on BW2) is present, but Dream World has closed anyways.");

      ml = new MemoryLink(default_memories);
      ml.Block2.Name = "Nate";
      ml.Block2.TID = 25560;
      ml.Block2.SID = 13453;

      uint newseed = (uint)(rand.Next(0xFFFF + 1) << 16);
      ml.Block1.CryptSeed = newseed;
      ml.Block1Mirror.CryptSeed = newseed;

      //Needed so export memory doesn't export my own data (default_memories)
      load_data();
      set_data();
    }

    load_data();
  }

  void load_data() {
    name.Text = ml.Block2.Name;
    tid.Value = ml.Block2.TID;
    sid.Value = ml.Block2.SID;
    starter.SelectedIndex = ml.Block2.STARTER;

    flag1.Checked = ml.Block2.CheckFlag(0);
    flag2.Checked = ml.Block2.CheckFlag(1);
    flag3.Checked = ml.Block2.CheckFlag(2);
    flag4.Checked = ml.Block2.CheckFlag(3);
    flag5.Checked = ml.Block2.CheckFlag(4);
    flag6.Checked = ml.Block2.CheckFlag(5);
    flag7.Checked = ml.Block2.CheckFlag(6);
    flag8.Checked = ml.Block2.CheckFlag(7);

    PROP.Text = BitConverter.ToString(ml.Block2.GetData(0x94, 13)).Replace("-", string.Empty);
  }

  void set_data() {
    ml.Block2.Name = name.Text;
    ml.Block2.TID = (ushort)tid.Value;
    ml.Block2.SID = (ushort)sid.Value;
    ml.Block2.STARTER = (byte)starter.SelectedIndex;

    ml.Block2.SetFlag(0, flag1.Checked);
    ml.Block2.SetFlag(1, flag2.Checked);
    ml.Block2.SetFlag(2, flag3.Checked);
    ml.Block2.SetFlag(3, flag4.Checked);
    ml.Block2.SetFlag(4, flag5.Checked);
    ml.Block2.SetFlag(5, flag6.Checked);
    ml.Block2.SetFlag(6, flag7.Checked);
    ml.Block2.SetFlag(7, flag8.Checked);

    ml.SetBlocks();
  }

  void Exit_butClick(object sender, EventArgs e) => Close();

  void Saveexit_butClick(object sender, EventArgs e) {
    set_data();
    SAV.SetData(ml.Data, MemoryLink.Offset);
    Close();
  }
  void B1_exportClick(object sender, EventArgs e) {
    FileIO.SaveFile(ml.Block1.Data, "Memory Link Data|*.bin|All Files (*.*)|*.*");
  }

  void B1m_exportClick(object sender, EventArgs e) {
    FileIO.SaveFile(ml.Block1Mirror.Data, "Memory Link Data|*.bin|All Files (*.*)|*.*");
  }

  void B2_exportClick(object sender, EventArgs e) {
    FileIO.SaveFile(ml.Block2.Data, "Memory Link Data|*.bin|All Files (*.*)|*.*");
  }

  void B1_importClick(object sender, EventArgs e) {
    byte[] new_block1 = new byte[MemoryLink.MemoryLinkBlock1.Size];
    string? path = null;
    int filesize = FileIO.LoadFile(ref new_block1!, ref path, "Memory Link Data|*.bin|All Files (*.*)|*.*");

    if (filesize == MemoryLink.MemoryLinkBlock1.Size) {
      new_block1.CopyTo(ml.Block1.Data, 0);
      //Reload
      load_data();
    } else if (filesize != -1) {
      MessageBox.Show("Invalid file");
    }
  }

  void B1m_importClick(object sender, EventArgs e) {
    byte[] new_block1m = new byte[MemoryLink.MemoryLinkBlock1.Size];
    string? path = null;
    int filesize = FileIO.LoadFile(ref new_block1m!, ref path, "Memory Link Data|*.bin|All Files (*.*)|*.*");

    if (filesize == MemoryLink.MemoryLinkBlock1.Size) {
      new_block1m.CopyTo(ml.Block1Mirror.Data, 0);
      //Reload
      load_data();
    } else if (filesize != -1) {
      MessageBox.Show($"Invalid file {filesize}");
    }
  }
  void B2_importClick(object sender, EventArgs e) {
    byte[] new_block2 = new byte[MemoryLink.MemoryLinkBlock2.Size];
    string? path = null;
    int filesize = FileIO.LoadFile(ref new_block2!, ref path, "Memory Link Data|*.bin|All Files (*.*)|*.*");

    if (filesize == MemoryLink.MemoryLinkBlock2.Size) {
      new_block2.CopyTo(ml.Block2.Data, 0);
      //Reload
      load_data();
    } else if (filesize != -1) {
      MessageBox.Show("Invalid file");
    }
  }
  void Memory_importClick(object sender, EventArgs e) {
    byte[] new_memory = new byte[MemoryLink.Size];
    string? path = null;
    int filesize = FileIO.LoadFile(ref new_memory!, ref path, "Memory Link Data|*.mld|All Files (*.*)|*.*");
    if (filesize == MemoryLink.Size) {
      ml = new MemoryLink(new_memory);
      //Reload all data
      load_data();
    } else if (filesize != -1) {
      MessageBox.Show("Invalid file");
    }
  }
  void Memory_exportClick(object sender, EventArgs e) {
    FileIO.SaveFile(ml.Data, "Memory Link Data|*.mld|All Files (*.*)|*.*");
  }
  void Import_bw1Click(object sender, EventArgs e) {
    byte[]? bw = null;
    string? path = null;

    int filesize = FileIO.LoadFile(ref bw!, ref path, "NDS save data|*.sav;*.dsv|All Files (*.*)|*.*");
    if (filesize != -1) {
      SaveFile bwSAV = (SaveFile)FileUtil.GetSupportedFile(bw, Path.GetExtension(path))!;
      if (bwSAV is SAV5BW) {
        ml.Block2.NameFromArray(bw.Skip(0x19404).Take(0xF).ToArray());
        ml.Block2.TID = BitConverter.ToUInt16(bw, 0x19414);
        ml.Block2.SID = BitConverter.ToUInt16(bw, 0x19416);
        ml.Block2.STARTER = bwSAV.Data[0x20160];

        ml.Block2.SetHOF(bw.Skip(0x23B00).Take(0x168).ToArray());
        ml.Block2.SetProps(bw.Skip(0x1F958).Take(0x13).ToArray());

        uint newseed = (uint)(rand.Next(0xFFFF + 1) << 16);
        ml.Block1.CryptSeed = newseed;
        ml.Block1Mirror.CryptSeed = newseed;

        //Reload all data
        load_data();
        MessageBox.Show("Imported: Trainer Name, TID, SID, Starter, Hall of Fame, Props");
      } else {
        MessageBox.Show("Not a valid Black/White savegame!");
      }
    }
  }

  private byte[] default_memories = new byte[] {
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, 0x15, 0x00, 0x00,
    0xCE, 0xA7, 0x34, 0x20, 0xEF, 0x11, 0x56, 0x1E, 0xF0, 0xE4, 0xE2, 0xCE,
    0x23, 0xE9, 0xE1, 0x78, 0xC1, 0x0F, 0xA2, 0x86, 0x9C, 0x6D, 0x2B, 0xE6,
    0x44, 0xAA, 0x13, 0x32, 0xDA, 0xC1, 0x6D, 0x37, 0x24, 0x95, 0xAE, 0xE1,
    0xA4, 0xC2, 0xB3, 0xC3, 0xC0, 0x74, 0x4E, 0xED, 0x3B, 0x84, 0x06, 0x8F,
    0x8A, 0x53, 0xF1, 0xA9, 0xD1, 0x6E, 0xCD, 0xBF, 0x91, 0x15, 0xBF, 0xB7,
    0x3C, 0xAE, 0x6F, 0x06, 0x5B, 0x91, 0x4C, 0x2C, 0xE6, 0xE8, 0x3D, 0xDB,
    0xF7, 0x61, 0x19, 0x1D, 0x08, 0x72, 0x8F, 0xB6, 0x53, 0xC6, 0x60, 0x4E,
    0x17, 0x6B, 0x2C, 0xA7, 0xCA, 0x21, 0x11, 0x0A, 0x7D, 0x88, 0xEE, 0xEA,
    0x01, 0xF2, 0x17, 0x63, 0x8C, 0x6D, 0xA5, 0x6D, 0xF2, 0x4D, 0xDE, 0x68,
    0xAF, 0xD3, 0x3C, 0x52, 0x49, 0x42, 0x19, 0x0F, 0xE1, 0xF0, 0x1A, 0xEA,
    0xEE, 0x9E, 0xC0, 0xCD, 0x63, 0xD1, 0xCA, 0xBE, 0xE2, 0x09, 0x57, 0x3D,
    0xA9, 0x98, 0xDE, 0x91, 0x4E, 0x6B, 0x76, 0x33, 0x94, 0xDD, 0x0F, 0x77,
    0xD9, 0x06, 0x84, 0x23, 0xE6, 0x95, 0xA9, 0x6C, 0x39, 0xD6, 0xC5, 0xC7,
    0xF2, 0x44, 0x25, 0x16, 0x0C, 0xF9, 0x97, 0x56, 0x93, 0x61, 0x17, 0x7D,
    0xE8, 0x4D, 0xF8, 0xC7, 0x5E, 0x27, 0x4A, 0xFC, 0xB0, 0x88, 0x4B, 0xEF,
    0x1A, 0x47, 0x28, 0xB9, 0x28, 0x5A, 0x5B, 0x6D, 0x70, 0x2A, 0x5F, 0x4F,
    0xCB, 0x7C, 0x9F, 0xBE, 0xDE, 0xBE, 0xC1, 0x92, 0xDC, 0xBA, 0xBF, 0xE9,
    0xF1, 0xFB, 0x6C, 0x8B, 0xBB, 0x41, 0x56, 0x92, 0xB2, 0x98, 0x2A, 0x10,
    0x79, 0xD6, 0xF9, 0x73, 0x61, 0xA4, 0x1A, 0xA3, 0xAE, 0xBF, 0x78, 0x89,
    0x60, 0xF6, 0x8F, 0x74, 0x89, 0x78, 0x63, 0x64, 0x71, 0xA9, 0x37, 0xB0,
    0x27, 0x81, 0xCF, 0x78, 0x24, 0x16, 0x7F, 0x78, 0x28, 0xE0, 0x59, 0x61,
    0x8A, 0x00, 0x36, 0x34, 0x7F, 0x29, 0x6B, 0x5F, 0x2E, 0xED, 0x6F, 0x12,
    0x8A, 0x1E, 0xBD, 0x9B, 0x45, 0xD1, 0xAC, 0xE8, 0x62, 0x3B, 0x1F, 0xEB,
    0x23, 0x92, 0x38, 0xCF, 0x73, 0xC5, 0x74, 0x1B, 0xF1, 0x07, 0xD4, 0x1F,
    0x4E, 0x2F, 0x01, 0x0D, 0x9D, 0x77, 0x95, 0xBA, 0xBD, 0xE5, 0xE7, 0x1B,
    0x11, 0xB8, 0x0C, 0xB5, 0x17, 0xDA, 0xED, 0x9D, 0xA6, 0x76, 0xA6, 0xD7,
    0xD5, 0x5D, 0x83, 0x78, 0xDA, 0x4E, 0x56, 0x8D, 0x65, 0x23, 0x03, 0x13,
    0x41, 0xA9, 0x70, 0x29, 0x3E, 0x78, 0x39, 0x29, 0xB9, 0x95, 0xD7, 0xA7,
    0x35, 0x0C, 0x25, 0x42, 0xE1, 0x14, 0x5B, 0x4B, 0x0D, 0xDA, 0xFE, 0xCE,
    0xCB, 0x84, 0x5C, 0xBE, 0x54, 0x05, 0x7A, 0x36, 0xF0, 0x24, 0xB2, 0x99,
    0x6C, 0xC1, 0x4C, 0x50, 0x63, 0xE5, 0xD0, 0x75, 0xE7, 0x95, 0xEE, 0x14,
    0x49, 0xF5, 0x26, 0xEA, 0x18, 0x94, 0x9F, 0x85, 0x89, 0xC4, 0xC7, 0x1E,
    0xE6, 0x51, 0xAF, 0x10, 0xBF, 0x6C, 0x4B, 0xD4, 0xE2, 0xBD, 0xFA, 0xF5,
    0x75, 0xB5, 0xF7, 0x05, 0x9C, 0x20, 0xB1, 0x6F, 0x94, 0x27, 0x1A, 0x8A,
    0x32, 0xDF, 0x5F, 0xA3, 0x17, 0xE4, 0xB9, 0x54, 0x28, 0xD3, 0x2B, 0x9F,
    0x02, 0x32, 0x6E, 0x40, 0x7F, 0x4B, 0x5A, 0xE7, 0x92, 0xF7, 0x8C, 0x81,
    0x00, 0x0B, 0x18, 0x58, 0xB5, 0x92, 0x87, 0x27, 0xD8, 0xD7, 0x77, 0x5F,
    0xBC, 0xC4, 0x92, 0x50, 0x69, 0x70, 0xB7, 0xD3, 0x4F, 0xA5, 0x89, 0xF3,
    0x5E, 0xF9, 0xC7, 0xE9, 0xA1, 0xD0, 0x11, 0x64, 0xFF, 0x38, 0x0B, 0x10,
    0xE3, 0x44, 0xFE, 0xF4, 0xC7, 0x33, 0x60, 0xB1, 0xFD, 0xA2, 0xF4, 0x5C,
    0x33, 0xFE, 0x5C, 0x24, 0x7B, 0xC6, 0x50, 0xC1, 0xDD, 0xD7, 0xD9, 0x4A,
    0xC5, 0xE8, 0x47, 0x8B, 0xC8, 0xE3, 0xB4, 0xA5, 0x92, 0xC3, 0x50, 0x6B,
    0xFD, 0x11, 0xD2, 0xE0, 0x9E, 0x66, 0xBF, 0x2E, 0x56, 0x0E, 0x63, 0x1B,
    0x9A, 0xB4, 0xB2, 0x4B, 0x98, 0x48, 0x6A, 0x70, 0x64, 0xBB, 0x30, 0x47,
    0xC7, 0x69, 0x7C, 0x83, 0x78, 0x5B, 0x8E, 0x59, 0xB6, 0xCA, 0xC7, 0x15,
    0xA5, 0xF2, 0x14, 0xF5, 0xDD, 0xBF, 0x55, 0xE7, 0x03, 0xFE, 0xE0, 0x12,
    0x6E, 0xCE, 0x92, 0x68, 0x23, 0xE7, 0x0A, 0x6A, 0xA9, 0x1E, 0x0B, 0x00,
    0x88, 0x70, 0x09, 0xF5, 0x6F, 0xBF, 0x77, 0xE8, 0x56, 0x75, 0x55, 0x69,
    0x15, 0x8F, 0xFB, 0xEA, 0x48, 0xF0, 0x4D, 0x85, 0x7A, 0xDD, 0xAA, 0x79,
    0xE7, 0x7D, 0x59, 0x58, 0x5C, 0x1B, 0x4A, 0xEE, 0xF9, 0xCD, 0x53, 0xE9,
    0xE6, 0x2A, 0x5D, 0xF1, 0x36, 0xB8, 0x22, 0xDF, 0x8C, 0x25, 0x5E, 0x4D,
    0x41, 0xE8, 0xA7, 0x0F, 0x1B, 0xAB, 0x4B, 0xB2, 0xD5, 0x54, 0xDD, 0x18,
    0x0B, 0x0E, 0x63, 0x2D, 0x3E, 0xF6, 0x3B, 0x68, 0x17, 0xF1, 0x30, 0x59,
    0x0B, 0x70, 0x5D, 0x54, 0x0F, 0x2A, 0xC7, 0x89, 0x01, 0xA2, 0xE2, 0x2C,
    0xEC, 0xFD, 0x4E, 0x79, 0x52, 0x54, 0x97, 0x64, 0x24, 0x0A, 0xBF, 0x38,
    0x0F, 0x73, 0xD4, 0x39, 0x3F, 0x6F, 0xEA, 0x68, 0xDA, 0x8C, 0x26, 0x81,
    0xAA, 0x10, 0xC0, 0xFF, 0xDE, 0x88, 0x2D, 0x76, 0xCB, 0xFD, 0xCD, 0x1D,
    0x03, 0xC8, 0xC7, 0xB6, 0x54, 0x58, 0x06, 0xB8, 0x5E, 0x25, 0x6E, 0xCC,
    0xDC, 0x4B, 0xC4, 0x19, 0xE6, 0x89, 0xDE, 0xE7, 0xAB, 0xEA, 0x10, 0x83,
    0x6D, 0x07, 0xFA, 0xB2, 0xD4, 0x03, 0x20, 0x67, 0xCD, 0xAE, 0xF0, 0x5C,
    0x89, 0x46, 0x21, 0x0F, 0x61, 0x95, 0x9A, 0x44, 0xAA, 0x46, 0x37, 0xA5,
    0xB7, 0xBD, 0x27, 0xE5, 0x9E, 0x36, 0xC1, 0xEB, 0x83, 0xD7, 0xFA, 0xE8,
    0x66, 0x6A, 0xE1, 0x24, 0xD5, 0x0A, 0xD1, 0x86, 0xEE, 0xF7, 0x3A, 0xEE,
    0x8E, 0x42, 0x29, 0x8D, 0xA6, 0x08, 0xFB, 0x14, 0x0F, 0xAA, 0xE1, 0xBF,
    0x51, 0xB0, 0x1C, 0xA6, 0x34, 0x52, 0x1D, 0x6C, 0x1C, 0x5D, 0xE7, 0xBE,
    0x80, 0x31, 0x6C, 0x56, 0xF2, 0x34, 0xBA, 0xE1, 0x99, 0xF3, 0x2C, 0x67,
    0x0E, 0xF4, 0x0A, 0xD3, 0xF6, 0x4B, 0x2D, 0xB9, 0xD1, 0x20, 0xAA, 0x42,
    0xD6, 0xBF, 0x95, 0xEE, 0xD5, 0xA8, 0x4D, 0xC5, 0x73, 0x1B, 0x02, 0xF0,
    0x41, 0x3B, 0x49, 0xE2, 0x77, 0x06, 0xF5, 0x79, 0x5E, 0xF4, 0x9D, 0x39,
    0xAE, 0x6B, 0x6D, 0x1C, 0x6A, 0x2E, 0x35, 0x06, 0xFD, 0xA7, 0xD2, 0x90,
    0xAC, 0x8B, 0x6B, 0x80, 0x93, 0xB4, 0x14, 0x8A, 0xC8, 0x8D, 0xD0, 0xE4,
    0x5D, 0xC0, 0x14, 0x63, 0x53, 0x4E, 0x2D, 0x23, 0xBE, 0xEC, 0x42, 0x4F,
    0xA9, 0x2C, 0xC4, 0x79, 0x00, 0x00, 0x46, 0x4E, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x31, 0x15, 0x00, 0x00, 0xCE, 0xA7, 0x34, 0x20, 0xEF, 0x11, 0x56, 0x1E,
    0xF0, 0xE4, 0xE2, 0xCE, 0x23, 0xE9, 0xE1, 0x78, 0xC1, 0x0F, 0xA2, 0x86,
    0x9C, 0x6D, 0x2B, 0xE6, 0x44, 0xAA, 0x13, 0x32, 0xDA, 0xC1, 0x6D, 0x37,
    0x24, 0x95, 0xAE, 0xE1, 0xA4, 0xC2, 0xB3, 0xC3, 0xC0, 0x74, 0x4E, 0xED,
    0x3B, 0x84, 0x06, 0x8F, 0x8A, 0x53, 0xF1, 0xA9, 0xD1, 0x6E, 0xCD, 0xBF,
    0x91, 0x15, 0xBF, 0xB7, 0x3C, 0xAE, 0x6F, 0x06, 0x5B, 0x91, 0x4C, 0x2C,
    0xE6, 0xE8, 0x3D, 0xDB, 0xF7, 0x61, 0x19, 0x1D, 0x08, 0x72, 0x8F, 0xB6,
    0x53, 0xC6, 0x60, 0x4E, 0x17, 0x6B, 0x2C, 0xA7, 0xCA, 0x21, 0x11, 0x0A,
    0x7D, 0x88, 0xEE, 0xEA, 0x01, 0xF2, 0x17, 0x63, 0x8C, 0x6D, 0xA5, 0x6D,
    0xF2, 0x4D, 0xDE, 0x68, 0xAF, 0xD3, 0x3C, 0x52, 0x49, 0x42, 0x19, 0x0F,
    0xE1, 0xF0, 0x1A, 0xEA, 0xEE, 0x9E, 0xC0, 0xCD, 0x63, 0xD1, 0xCA, 0xBE,
    0xE2, 0x09, 0x57, 0x3D, 0xA9, 0x98, 0xDE, 0x91, 0x4E, 0x6B, 0x76, 0x33,
    0x94, 0xDD, 0x0F, 0x77, 0xD9, 0x06, 0x84, 0x23, 0xE6, 0x95, 0xA9, 0x6C,
    0x39, 0xD6, 0xC5, 0xC7, 0xF2, 0x44, 0x25, 0x16, 0x0C, 0xF9, 0x97, 0x56,
    0x93, 0x61, 0x17, 0x7D, 0xE8, 0x4D, 0xF8, 0xC7, 0x5E, 0x27, 0x4A, 0xFC,
    0xB0, 0x88, 0x4B, 0xEF, 0x1A, 0x47, 0x28, 0xB9, 0x28, 0x5A, 0x5B, 0x6D,
    0x70, 0x2A, 0x5F, 0x4F, 0xCB, 0x7C, 0x9F, 0xBE, 0xDE, 0xBE, 0xC1, 0x92,
    0xDC, 0xBA, 0xBF, 0xE9, 0xF1, 0xFB, 0x6C, 0x8B, 0xBB, 0x41, 0x56, 0x92,
    0xB2, 0x98, 0x2A, 0x10, 0x79, 0xD6, 0xF9, 0x73, 0x61, 0xA4, 0x1A, 0xA3,
    0xAE, 0xBF, 0x78, 0x89, 0x60, 0xF6, 0x8F, 0x74, 0x89, 0x78, 0x63, 0x64,
    0x71, 0xA9, 0x37, 0xB0, 0x27, 0x81, 0xCF, 0x78, 0x24, 0x16, 0x7F, 0x78,
    0x28, 0xE0, 0x59, 0x61, 0x8A, 0x00, 0x36, 0x34, 0x7F, 0x29, 0x6B, 0x5F,
    0x2E, 0xED, 0x6F, 0x12, 0x8A, 0x1E, 0xBD, 0x9B, 0x45, 0xD1, 0xAC, 0xE8,
    0x62, 0x3B, 0x1F, 0xEB, 0x23, 0x92, 0x38, 0xCF, 0x73, 0xC5, 0x74, 0x1B,
    0xF1, 0x07, 0xD4, 0x1F, 0x4E, 0x2F, 0x01, 0x0D, 0x9D, 0x77, 0x95, 0xBA,
    0xBD, 0xE5, 0xE7, 0x1B, 0x11, 0xB8, 0x0C, 0xB5, 0x17, 0xDA, 0xED, 0x9D,
    0xA6, 0x76, 0xA6, 0xD7, 0xD5, 0x5D, 0x83, 0x78, 0xDA, 0x4E, 0x56, 0x8D,
    0x65, 0x23, 0x03, 0x13, 0x41, 0xA9, 0x70, 0x29, 0x3E, 0x78, 0x39, 0x29,
    0xB9, 0x95, 0xD7, 0xA7, 0x35, 0x0C, 0x25, 0x42, 0xE1, 0x14, 0x5B, 0x4B,
    0x0D, 0xDA, 0xFE, 0xCE, 0xCB, 0x84, 0x5C, 0xBE, 0x54, 0x05, 0x7A, 0x36,
    0xF0, 0x24, 0xB2, 0x99, 0x6C, 0xC1, 0x4C, 0x50, 0x63, 0xE5, 0xD0, 0x75,
    0xE7, 0x95, 0xEE, 0x14, 0x49, 0xF5, 0x26, 0xEA, 0x18, 0x94, 0x9F, 0x85,
    0x89, 0xC4, 0xC7, 0x1E, 0xE6, 0x51, 0xAF, 0x10, 0xBF, 0x6C, 0x4B, 0xD4,
    0xE2, 0xBD, 0xFA, 0xF5, 0x75, 0xB5, 0xF7, 0x05, 0x9C, 0x20, 0xB1, 0x6F,
    0x94, 0x27, 0x1A, 0x8A, 0x32, 0xDF, 0x5F, 0xA3, 0x17, 0xE4, 0xB9, 0x54,
    0x28, 0xD3, 0x2B, 0x9F, 0x02, 0x32, 0x6E, 0x40, 0x7F, 0x4B, 0x5A, 0xE7,
    0x92, 0xF7, 0x8C, 0x81, 0x00, 0x0B, 0x18, 0x58, 0xB5, 0x92, 0x87, 0x27,
    0xD8, 0xD7, 0x77, 0x5F, 0xBC, 0xC4, 0x92, 0x50, 0x69, 0x70, 0xB7, 0xD3,
    0x4F, 0xA5, 0x89, 0xF3, 0x5E, 0xF9, 0xC7, 0xE9, 0xA1, 0xD0, 0x11, 0x64,
    0xFF, 0x38, 0x0B, 0x10, 0xE3, 0x44, 0xFE, 0xF4, 0xC7, 0x33, 0x60, 0xB1,
    0xFD, 0xA2, 0xF4, 0x5C, 0x33, 0xFE, 0x5C, 0x24, 0x7B, 0xC6, 0x50, 0xC1,
    0xDD, 0xD7, 0xD9, 0x4A, 0xC5, 0xE8, 0x47, 0x8B, 0xC8, 0xE3, 0xB4, 0xA5,
    0x92, 0xC3, 0x50, 0x6B, 0xFD, 0x11, 0xD2, 0xE0, 0x9E, 0x66, 0xBF, 0x2E,
    0x56, 0x0E, 0x63, 0x1B, 0x9A, 0xB4, 0xB2, 0x4B, 0x98, 0x48, 0x6A, 0x70,
    0x64, 0xBB, 0x30, 0x47, 0xC7, 0x69, 0x7C, 0x83, 0x78, 0x5B, 0x8E, 0x59,
    0xB6, 0xCA, 0xC7, 0x15, 0xA5, 0xF2, 0x14, 0xF5, 0xDD, 0xBF, 0x55, 0xE7,
    0x03, 0xFE, 0xE0, 0x12, 0x6E, 0xCE, 0x92, 0x68, 0x23, 0xE7, 0x0A, 0x6A,
    0xA9, 0x1E, 0x0B, 0x00, 0x88, 0x70, 0x09, 0xF5, 0x6F, 0xBF, 0x77, 0xE8,
    0x56, 0x75, 0x55, 0x69, 0x15, 0x8F, 0xFB, 0xEA, 0x48, 0xF0, 0x4D, 0x85,
    0x7A, 0xDD, 0xAA, 0x79, 0xE7, 0x7D, 0x59, 0x58, 0x5C, 0x1B, 0x4A, 0xEE,
    0xF9, 0xCD, 0x53, 0xE9, 0xE6, 0x2A, 0x5D, 0xF1, 0x36, 0xB8, 0x22, 0xDF,
    0x8C, 0x25, 0x5E, 0x4D, 0x41, 0xE8, 0xA7, 0x0F, 0x1B, 0xAB, 0x4B, 0xB2,
    0xD5, 0x54, 0xDD, 0x18, 0x0B, 0x0E, 0x63, 0x2D, 0x3E, 0xF6, 0x3B, 0x68,
    0x17, 0xF1, 0x30, 0x59, 0x0B, 0x70, 0x5D, 0x54, 0x0F, 0x2A, 0xC7, 0x89,
    0x01, 0xA2, 0xE2, 0x2C, 0xEC, 0xFD, 0x4E, 0x79, 0x52, 0x54, 0x97, 0x64,
    0x24, 0x0A, 0xBF, 0x38, 0x0F, 0x73, 0xD4, 0x39, 0x3F, 0x6F, 0xEA, 0x68,
    0xDA, 0x8C, 0x26, 0x81, 0xAA, 0x10, 0xC0, 0xFF, 0xDE, 0x88, 0x2D, 0x76,
    0xCB, 0xFD, 0xCD, 0x1D, 0x03, 0xC8, 0xC7, 0xB6, 0x54, 0x58, 0x06, 0xB8,
    0x5E, 0x25, 0x6E, 0xCC, 0xDC, 0x4B, 0xC4, 0x19, 0xE6, 0x89, 0xDE, 0xE7,
    0xAB, 0xEA, 0x10, 0x83, 0x6D, 0x07, 0xFA, 0xB2, 0xD4, 0x03, 0x20, 0x67,
    0xCD, 0xAE, 0xF0, 0x5C, 0x89, 0x46, 0x21, 0x0F, 0x61, 0x95, 0x9A, 0x44,
    0xAA, 0x46, 0x37, 0xA5, 0xB7, 0xBD, 0x27, 0xE5, 0x9E, 0x36, 0xC1, 0xEB,
    0x83, 0xD7, 0xFA, 0xE8, 0x66, 0x6A, 0xE1, 0x24, 0xD5, 0x0A, 0xD1, 0x86,
    0xEE, 0xF7, 0x3A, 0xEE, 0x8E, 0x42, 0x29, 0x8D, 0xA6, 0x08, 0xFB, 0x14,
    0x0F, 0xAA, 0xE1, 0xBF, 0x51, 0xB0, 0x1C, 0xA6, 0x34, 0x52, 0x1D, 0x6C,
    0x1C, 0x5D, 0xE7, 0xBE, 0x80, 0x31, 0x6C, 0x56, 0xF2, 0x34, 0xBA, 0xE1,
    0x99, 0xF3, 0x2C, 0x67, 0x0E, 0xF4, 0x0A, 0xD3, 0xF6, 0x4B, 0x2D, 0xB9,
    0xD1, 0x20, 0xAA, 0x42, 0xD6, 0xBF, 0x95, 0xEE, 0xD5, 0xA8, 0x4D, 0xC5,
    0x73, 0x1B, 0x02, 0xF0, 0x41, 0x3B, 0x49, 0xE2, 0x77, 0x06, 0xF5, 0x79,
    0x5E, 0xF4, 0x9D, 0x39, 0xAE, 0x6B, 0x6D, 0x1C, 0x6A, 0x2E, 0x35, 0x06,
    0xFD, 0xA7, 0xD2, 0x90, 0xAC, 0x8B, 0x6B, 0x80, 0x93, 0xB4, 0x14, 0x8A,
    0xC8, 0x8D, 0xD0, 0xE4, 0x5D, 0xC0, 0x14, 0x63, 0x53, 0x4E, 0x2D, 0x23,
    0xBE, 0xEC, 0x42, 0x4F, 0xA9, 0x2C, 0xC4, 0x79, 0x00, 0x00, 0x46, 0x4E,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAE, 0x49, 0x0F, 0xA1,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x9A, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC2, 0x06, 0xB7, 0xA2, 0x80, 0x2A, 0x59, 0xEB, 0x53, 0x00, 0x75, 0x00,
    0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x15, 0x01, 0x00, 0x80, 0x2A, 0x59, 0xEB, 0x53, 0x00, 0x75, 0x00,
    0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x15, 0x01, 0x00, 0x80, 0x2A, 0x59, 0xEB, 0x53, 0x00, 0x75, 0x00,
    0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF, 0x00, 0x00,
    0x00, 0x15, 0x01, 0x00, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x0A, 0x1E, 0x00,
    0xF7, 0x01, 0x43, 0x00, 0xDE, 0x9D, 0xB5, 0x0D, 0x80, 0x2A, 0x59, 0xEB,
    0x53, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6F, 0x00,
    0x74, 0x00, 0x74, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0x5B, 0x00, 0x38, 0x00, 0x39, 0x00, 0x17, 0x01, 0x00, 0x00,
    0x02, 0x02, 0x39, 0x00, 0x6E, 0x1A, 0x98, 0x00, 0x80, 0x2A, 0x59, 0xEB,
    0x53, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x73, 0x00, 0x65, 0x00,
    0x61, 0x00, 0x72, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0xF2, 0x00, 0x7E, 0x00, 0x00, 0x02, 0xE1, 0x01, 0x00, 0x00,
    0x6D, 0x02, 0x35, 0x00, 0xD6, 0x54, 0x1F, 0xDA, 0x80, 0x2A, 0x59, 0xEB,
    0x44, 0x00, 0x72, 0x00, 0x75, 0x00, 0x64, 0x00, 0x64, 0x00, 0x69, 0x00,
    0x67, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0xA3, 0x00, 0x90, 0x01, 0x51, 0x01, 0xAF, 0x01, 0x00, 0x00,
    0x63, 0x02, 0x28, 0x00, 0xDE, 0x2C, 0x7D, 0xBD, 0x80, 0x2A, 0x59, 0xEB,
    0x46, 0x00, 0x72, 0x00, 0x61, 0x00, 0x78, 0x00, 0x75, 0x00, 0x72, 0x00,
    0x65, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0xCE, 0x00, 0x51, 0x01, 0x5D, 0x01, 0x0D, 0x01, 0x00, 0x00,
    0xF9, 0x01, 0x1C, 0x40, 0x08, 0xBD, 0x0E, 0xD7, 0x80, 0x2A, 0x59, 0xEB,
    0x57, 0x00, 0x61, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x6F, 0x00,
    0x67, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0xF9, 0x00, 0x94, 0x00, 0x46, 0x00, 0x0F, 0x00, 0x00, 0x00,
    0x44, 0x02, 0x1C, 0x00, 0xB0, 0x9C, 0x9B, 0xDF, 0x80, 0x2A, 0x59, 0xEB,
    0x44, 0x00, 0x75, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x6C, 0x00, 0x65, 0x00,
    0x74, 0x00, 0x74, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x75, 0x00, 0xFF, 0xFF,
    0x00, 0x00, 0x93, 0x01, 0x39, 0x00, 0x13, 0x00, 0x88, 0x01, 0x00, 0x00
  };


  void PropUnlockButClick(object sender, EventArgs e) {
    ml.Block2.SetProps(default_memories.Skip(0x894).Take(0x13).ToArray());
    MessageBox.Show("All props have been unlocked for memory link.");
    PROP.Text = BitConverter.ToString(ml.Block2.GetData(0x94, 13)).Replace("-", string.Empty);
  }

  void MemoryLinkLoad(object sender, EventArgs e) {

  }
}
